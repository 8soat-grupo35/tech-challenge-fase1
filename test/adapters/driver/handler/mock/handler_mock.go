// Code generated by MockGen. DO NOT EDIT.
// Source: handler.go
//
// Generated by this command:
//
//	mockgen -source=handler.go -destination=../../../../test/adapters/driver/handler/mock/handler_mock.go
//

// Package mock_handler is a generated GoMock package.
package mock_handler

import (
	reflect "reflect"

	handler "github.com/8soat-grupo35/tech-challenge-fase1/internal/adapters/driver/handler"
	gomock "go.uber.org/mock/gomock"
)

// MockHandlers is a mock of Handlers interface.
type MockHandlers struct {
	ctrl     *gomock.Controller
	recorder *MockHandlersMockRecorder
}

// MockHandlersMockRecorder is the mock recorder for MockHandlers.
type MockHandlersMockRecorder struct {
	mock *MockHandlers
}

// NewMockHandlers creates a new mock instance.
func NewMockHandlers(ctrl *gomock.Controller) *MockHandlers {
	mock := &MockHandlers{ctrl: ctrl}
	mock.recorder = &MockHandlersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHandlers) EXPECT() *MockHandlersMockRecorder {
	return m.recorder
}

// Item mocks base method.
func (m *MockHandlers) Item() handler.ItemHandler {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Item")
	ret0, _ := ret[0].(handler.ItemHandler)
	return ret0
}

// Item indicates an expected call of Item.
func (mr *MockHandlersMockRecorder) Item() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Item", reflect.TypeOf((*MockHandlers)(nil).Item))
}
